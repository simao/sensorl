// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: messages.proto

final case class Measurement (
	`value`: Double = 0.0,
	`time`: String = ""
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Measurement]
	with net.sandrogrzicic.scalabuff.Parser[Measurement] {



	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeDouble(1, `value`)
		output.writeString(2, `time`)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeDoubleSize(1, `value`)
		__size += computeStringSize(2, `time`)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Measurement = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __value: Double = 0.0
		var __time: String = ""

		def __newMerged = Measurement(
			__value,
			__time
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 9 => __value = in.readDouble()
			case 18 => __time = in.readString()
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Measurement) = {
		Measurement(
			m.`value`,
			m.`time`
		)
	}

	def getDefaultInstanceForType = Measurement.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"value\": ").append("\"").append(`value`).append("\"").append(',')
			sb.append(indent1).append("\"time\": ").append("\"").append(`time`).append("\"").append(',')
		sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Measurement {
	@beans.BeanProperty val defaultInstance = new Measurement()

	def parseFrom(data: Array[Byte]): Measurement = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Measurement = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Measurement = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Measurement = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Measurement] = defaultInstance.mergeDelimitedFromStream(stream)

	val VALUE_FIELD_NUMBER = 1
	val TIME_FIELD_NUMBER = 2

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Measurement) = defaultInstance.mergeFrom(prototype)

}

object Messages {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

}
